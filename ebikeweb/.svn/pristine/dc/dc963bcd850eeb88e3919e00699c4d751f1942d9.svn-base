<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
http://www.springframework.org/schema/security 
http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	<global-method-security pre-post-annotations="enabled">
	</global-method-security>
	<!-- 该路径下的资源不用过滤 -->
	<http pattern="/static/js/**" security="none" />
	<http pattern="/static/css/**" security="none" />
	<http pattern="/static/image/**" security="none" />
	<http pattern="/phone/**" security="none" />
	<http pattern="/api-docs/**" security="none" />
	<http pattern="/index.jsp" security="none" />
	<!--auto-config = true 则使用from-login. 如果不使用该属性 则默认为http-basic(没有session). -->
	<!-- lowercase-comparisons：表示URL比较前先转为小写。 -->
	<!-- path-type：表示使用Apache Ant的匹配模式。 -->
	<!--access-denied-page：访问拒绝时转向的页面。 -->
	<!-- access-decision-manager-ref：指定了自定义的访问策略管理器。 -->

	<http use-expressions="true"  entry-point-ref="authenticationProcessingFilterEntryPoint">
		<!--login-page：指定登录页面。 -->
		<!-- login-processing-url：指定了客户在登录页面中按下 Sign In 按钮时要访问的 URL。 -->
		<!-- authentication-failure-url：指定了身份验证失败时跳转到的页面。 -->
		<!-- default-target-url：指定了成功进行身份验证和授权后默认呈现给用户的页面。 -->
		<!-- always-use-default-target：指定了是否在身份验证通过后总是跳转到default-target-url属性指定的URL。 -->

		<!-- <form-login login-page="/userAction/index"  login-processing-url="/j_security_check"
		default-target-url="/userAction/login"
			always-use-default-target="true" authentication-failure-url="/userAction/index?11" /> -->
		<!--logout-url：指定了用于响应退出系统请求的URL。其默认值为：/j_spring_security_logout。 -->
		<!-- logout-success-url：退出系统后转向的URL。 -->
		<!-- invalidate-session：指定在退出系统时是否要销毁Session。 -->
		<logout invalidate-session="true" logout-success-url="/user/gotologin"
			logout-url="/j_spring_security_logout" />
		<!-- 实现免登陆验证
		<remember-me /> -->

		<!-- max-sessions:允许用户帐号登录的次数。范例限制用户只能登录一次。 -->
		<!-- 此值表示：用户第二次登录时，前一次的登录信息都被清空。 -->
		<!-- exception-if-maximum-exceeded:默认为false， -->
		<!-- 当exception-if-maximum-exceeded="true"时系统会拒绝第二次登录。 -->

		<session-management invalid-session-url="/userAction/index"
			session-fixation-protection="none">
			<concurrency-control max-sessions="1"
				error-if-maximum-exceeded="false" />
		</session-management>
		<custom-filter ref="loginFilter" position="FORM_LOGIN_FILTER"  />  
		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
		<!-- <session-management
			session-authentication-strategy-ref="sas" /> -->

	</http>
	
	 <beans:bean id="loginFilter"  
        class="com.clt.security.filter.MyUsernamePasswordAuthenticationFilter">  
        <!-- 处理登录的action -->  
        <beans:property name="filterProcessesUrl" value="/j_spring_security_check"></beans:property>  
                <!-- 验证成功后的处理-->  
        <beans:property name="authenticationSuccessHandler" ref="loginLogAuthenticationSuccessHandler"></beans:property>  
                <!-- 验证失败后的处理-->  
        <beans:property name="authenticationFailureHandler" ref="simpleUrlAuthenticationFailureHandler"></beans:property>  
        <beans:property name="authenticationManager" ref="myAuthenticationManager"></beans:property>  
    </beans:bean>  
	
	<beans:bean id="loginLogAuthenticationSuccessHandler"  
        class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">  
        <beans:property name="defaultTargetUrl" value="/back/getBackHome"></beans:property>  
    </beans:bean>  
    <beans:bean id="simpleUrlAuthenticationFailureHandler"  
        class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">  
        <!-- 可以配置相应的跳转方式。属性forwardToDestination为true采用forward false为sendRedirect -->  
        <beans:property name="defaultFailureUrl" value="/userAction/index"></beans:property>  
    </beans:bean>  
    
    
	<beans:bean id="sas"
		class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<beans:constructor-arg name="sessionRegistry"
			ref="sessionRegistry" />
		<beans:property name="maximumSessions" value="1" />
		<!-- 防止session攻击 -->
		<beans:property name="alwaysCreateSession" value="true" />
		<beans:property name="migrateSessionAttributes" value="false" />
		<!-- 同一个帐号 同时只能一个人登录 -->
		<beans:property name="exceptionIfMaximumExceeded"
			value="false" />
	</beans:bean>
	<beans:bean id="sessionRegistry"
		class="org.springframework.security.core.session.SessionRegistryImpl" />
	<!-- 事件监听:实现了ApplicationListener监听接口，包括AuthenticationCredentialsNotFoundEvent 
		事件， -->
	<!-- AuthorizationFailureEvent事件，AuthorizedEvent事件， PublicInvocationEvent事件 -->
	<beans:bean
		class="org.springframework.security.authentication.event.LoggerListener" />
	<!-- 自定义资源文件 提示信息 
	<beans:bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<beans:property name="basenames" value="classpath:message_zh_CN">
		</beans:property>
	</beans:bean>-->
	<!-- 配置过滤器 -->
	<beans:bean id="myFilter"
		class="com.clt.security.filter.CustomFilterSecurityInterceptorImpl">
		<!-- 用户拥有的权限 -->
		<beans:property name="authenticationManager" ref="myAuthenticationManager" />
		<!-- 用户是否拥有所请求资源的权限 -->
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManager" />
		<!-- 资源与权限对应关系 -->
		<beans:property name="securityMetadataSource" ref="mySecurityMetadataSource" />
	</beans:bean>
	<!-- 实现了UserDetailsService的Bean -->
	<authentication-manager alias="myAuthenticationManager">
		<authentication-provider user-service-ref="myUserDetailServiceImpl">
			<!-- 登入 密码 采用MD5加密 -->
			<password-encoder hash="md5" ref="passwordEncoder">
			<!-- 用户名做为盐值  -->
                <salt-source  user-property="username" />
			</password-encoder>
		</authentication-provider>
	</authentication-manager>
	<!-- 验证用户请求资源 是否拥有权限 -->
	<beans:bean id="myAccessDecisionManager"
		class="com.clt.security.bean.CustomAccessDecisionManagerImpl">
	</beans:bean>
	<!-- 系统运行时加载 系统要拦截的资源 与用户请求时要过滤的资源 -->
	<beans:bean id="mySecurityMetadataSource"
		class="com.clt.security.bean.CustomFilterInvocationSecurityMetadataSourceImpl">
	</beans:bean>
	<!-- 获取用户登入角色信息 -->
	<beans:bean id="myUserDetailServiceImpl"
		class="com.clt.security.bean.CustomUserDetailsServiceImpl">
	</beans:bean>

	<!-- 用户的密码加密或解密 -->
	<beans:bean id="passwordEncoder"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	
 <!-- 未登录的切入点 -->  
    <beans:bean id="authenticationProcessingFilterEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">  
        <beans:property name="loginFormUrl" value="/userAction/index"></beans:property>  
    </beans:bean>  
</beans:beans>  